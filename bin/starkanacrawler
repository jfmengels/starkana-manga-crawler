#!/usr/bin/env node

'use strict';

var fs = require("fs");
var async = require("async");
var program = require('commander');

var crawler = require("../index.js");

var configFile = "./config.json";


program
    .version('0.0.1')
    .option('-s, --series [series]', 'Series')
    .option('-c, --chapter [chapter]', 'Chapter (or first chapter) to download', '1')
    .option('-C, --maxChapter [maxChapter]', 'Chapter up to which to download')
    .option('-l, --untilLast', 'Download until the last released chapter')
    .option('-O, --outputDirectory [directory]', 'Setting: Directory in which the files will be downloaded.')
    .option('-S, --save', 'Save settings so that they will automatically be reused on the next call.')
    .option('-f, --outputFormat [outputFormat]', 'Set how the downloaded content will be outputted: "folder" | "zip".')
    .option('-r, --clean', 'Remove starkana and scanlator team credits.')
    .option('-R, --rename', 'Rename chapter files upon download.')
    .option('-u, --url [url]', 'Use url path instead of normal one. Should not contain shared path "starkana.com/manga".')
    .parse(process.argv);


function gracefulEnd(error) {
    if (error) {
        console.error(error);
    }
    process.exit(0);
}

if (!program.series) {
    gracefulEnd("Missing series argument.");
}
if (!program.chapter) {
    program.chapter = 1;
}

var config = {},
    defaultConfig = {
        readDirectory: ".",
        outputDirectory: ".",
        outputFormat: "folder",
        clean: false,
        rename: true,
        series: []
    },
    allowedOutputFormats = ["folder", "zip"];

try {
    var configData = fs.readFileSync(configFile);
    config = JSON.parse(configData);
} catch (e) {}

if (program.outputDirectory) {
    config.outputDirectory = program.outputDirectory;
}

if (program.outputFormat) {
    if (allowedOutputFormats.indexOf(program.outputFormat) === -1) {
        gracefulEnd("Unknown output format.");
    }
    config.outputFormat = program.outputFormat;
}

if (program.clean) {
    config.clean = program.clean;
}

if (program.rename) {
    config.rename = program.rename;
}

// Filling missing config fields
for (var i in defaultConfig) {
    config[i] = config[i] || defaultConfig[i];
}

// Save config to file
if (program.save) {
    fs.writeFileSync("./config.json", JSON.stringify(config, null, 4));
}

var jobs = [
    crawler.createJob({
        series: program.series,
        chapter: parseInt(program.chapter),
        maxChapter: parseInt(program.maxChapter),
        untilLast: program.untilLast,
        url: program.url
    })
];

async.eachLimit(jobs, 5,
    function(job, cb) {
        crawler.runJob(config, job, cb, function(progress) {
            console.log(progress.type + "\t" + progress.action + "\t" + progress.series + " " + (progress.chapter || ""));
        });
    },
    gracefulEnd
);