#!/usr/bin/env node

'use strict';

var fs = require("fs");
var path = require("path");
var async = require("async");

var crawler = require("../index");

var config = JSON.parse(fs.readFileSync("./config.json"));

function getCurrentMaxChapter(folder, series, cb) {
    fs.readdir(path.resolve(folder, series.name), function(error, files) {
        if (error) {
            return cb(null, 0);
        }
        var chapterNumbers = files
            .filter(function(item) {
                return item.indexOf(series.name) > -1;
            })
            .map(function(item) {
                return parseFloat(item.substring(series.name.length + 1));
            })
            .filter(function(item) {
                return !isNaN(item);
            });

        if (chapterNumbers.length === 0) {
            chapterNumbers = [0];
        }
        return cb(null, Math.max.apply(null, chapterNumbers));
    });
}

async.mapLimit(config.series, 5, function(series, cb) {
    async.map([config.readDirectory, config.outputDirectory], function(folder, cb) {
        getCurrentMaxChapter(folder, series, cb);
    }, function(error, maxChapterNumbers) {
        if (error) {
            return cb(error);
        }
        return cb(null, crawler.createJob({
            series: series.name,
            currentChapter: Math.max.apply(null, maxChapterNumbers),
            untilLast: true,
            url: series.url
        }));
    });
}, function(error, jobs) {
    function gracefulEnd(error) {
        if (error) {
            console.error(error);
        }
        process.exit(0);
    }

    if (error) {
        return gracefulEnd(error);
    }

    async.eachSeries(jobs,
        function(job, cb) {
            crawler.runJob(config, job, cb, function(progress) {
                console.log(progress.type + "\t" + progress.action + "\t" + progress.series + " " + (progress.chapter || ""));
            });
        },
        gracefulEnd
    );
});