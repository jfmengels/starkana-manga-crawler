#!/usr/bin/env node

'use strict';

var fs = require("fs");
var async = require('async');
var extend = require('extend');
var program = require('commander');

var utils = require("../utils"),
    starkana = require("../index"),
    crawler = starkana.crawler,
    cleaner = starkana.cleaner,
    renamer = starkana.renamer,
    updater = starkana.updater,
    subscriber = starkana.subscriber;


var allowedOutputFormats = ["folder", "zip"],
    configFile = "./config.json",
    cacheFile = "./cache.json",
    baseConfig = {
        readDirectories: [],
        outputDirectory: ".",
        outputFormat: "folder",
        cleanStarkanaCredits: true,
        cleanDuplicates: false,
        rename: true,
        subscriptions: [],
        cache: false,
        cacheData: {}
    };

function gracefulEnd(error) {
    if (error) {
        console.error("\n  error: " + error + "\n");
        process.exit(1);
    }
    process.exit(0);
}

function saveConfig(config) {
    var configKeys = Object.keys(baseConfig);
    fs.writeFileSync(configFile, JSON.stringify(utils.pick(config, configKeys), null, 4));
}

function saveCache(config, cb) {
    fs.writeFile(cacheFile, JSON.stringify(config.cacheData, null, 4), cb);
}

function addResultsToCache(config, results, cb) {
    results.forEach(function(r) {
        if (!r.isMissing) {
            config.cacheData[r.series] = Math.max(config.cacheData[r.series] || 0, r.chapter);
        }
    });
    saveCache(config, cb);
}

function init(program, options) {
    var config = {};
    configFile = program.config || configFile;

    try {
        var configData = fs.readFileSync(configFile);
        config = JSON.parse(configData);
    } catch (e) {}

    config = extend({}, baseConfig, config, options);

    if (allowedOutputFormats.indexOf(config.outputFormat) === -1) {
        gracefulEnd("unsupported outputFormat: " + config.outputFormat);
    }

    // These should override config
    if (options.cleanStarkanaCredits || options.cleanDuplicates) {
        config.cleanStarkanaCredits = options.cleanStarkanaCredits;
        config.cleanDuplicates = options.cleanDuplicates;
    }

    if (config.cache) {
        try {
            var cacheData = fs.readFileSync(cacheFile);
            config.cacheData = JSON.parse(cacheData);
        } catch (e) {}
    }

    // Save config to file
    if (program.save) {
        saveConfig(config);
    }
    return config;
}

function progressPrinter(progress) {
    if (progress.action === "queue") {
        var amount = progress.newJobs.length + " chapter" + (progress.newJobs.length > 1 ? "s" : "");
        console.log("Queuing " + amount + " for " + progress.series);
    } else if (progress.action === "check") {
        if (progress.type === "start") {
            console.log("Checking " + progress.series);
        }
    } else {
        console.log(progress.type + "\t" + progress.action + "\t" + progress.series + " " + (progress.chapter || ""));
    }
}

function detailCleanOperation(job, cleanResults) {
    var output = [];
    if (cleanResults.creditsRemoved === 0 && cleanResults.duplicatesRemoved === 0) {
        return console.log("Nothing to clean.");
    }
    if (job.cleanStarkanaCredits) {
        output.push(cleanResults.creditsRemoved + ' credit');
    }
    if (job.cleanDuplicates) {
        output.push(cleanResults.duplicatesRemoved + ' duplicate');
    }
    console.log('Removed ' + output.join(' and ') + ' files.');
}

function examples(exampleArray) {
    var commandName = program._name;
    console.log('  Examples:');
    console.log();
    exampleArray.forEach(function(example) {
        console.log('    $ ' + commandName + ' ' + example);
    });
    console.log();
}

function clean(folders, config, cb) {
    if (!config.cleanStarkanaCredits && !config.cleanDuplicates) {
        return cb();
    }

    var job = {
        cleanStarkanaCredits: config.cleanStarkanaCredits || false,
        cleanDuplicates: config.cleanDuplicates || false
    };

    cleaner.cleanFolders(folders, job, function(error, cleanResults) {
        if (error) {
            return cb(error);
        }
        detailCleanOperation(job, cleanResults);
        return cb();
    });
}

function rename(folders, config, cb) {
    renamer.renameFolders(folders, config, cb);
}

function postExecution(config, allowedOperations, cb) {
    return function(error, results) {
        if (error) {
            return cb(error);
        }
        var folders = results.map(function(res) {
            return res.outputFile;
        });

        var tasks = [];
        if (config.cache && allowedOperations.indexOf("updateCache") !== -1) {
            tasks.push(function(cb) {
                addResultsToCache(config, results, cb);
            });
        }

        if ((config.cleanStarkanaCredits || config.cleanDuplicates) && allowedOperations.indexOf("clean") !== -1) {
            tasks.push(function(cb) {
                clean(folders, config, cb);
            });
        }

        if (config.rename && allowedOperations.indexOf("rename") !== -1) {
            tasks.push(function(cb) {
                rename(folders, config, cb);
            });
        }

        async.series(tasks, cb);
    };
}


program
    .version('1.0.0')
    .option("--config <config>", "Set configuration file to use.")
    .option('-S, --save', 'Save settings to the default config file so that they will automatically be reused on the next call.');

var downloadCommand = program
    .command('download <series> <chapters> [maxChapter]')
    .alias('dl')
    .description('Downloads specific chapters from a given series.')
    .option('-l, --untilLast', 'Download until the last released chapter')
    .option('-f, --outputFormat <outputFormat>', 'Set how the downloaded content will be outputted: ' + allowedOutputFormats.join(' | ') + '.')
    .option('-u, --url <url>', 'Use url path instead of normal one. Should not contain shared path "starkana.com/manga".')
    .option('-c, --cache', 'Use cache to remember the progress when using the update command.')
    .action(function(series, chapters, maxChapter, options) {
        if (!series) {
            gracefulEnd("Missing series argument.");
        }
        if (!chapters) {
            gracefulEnd("Missing chapters argument.");
        }
        var config = init(program, options),
            job = crawler.createJob({
                series: series,
                chapter: parseFloat(chapters),
                maxChapter: parseFloat(maxChapter),
                untilLast: config.untilLast,
                url: config.url
            });

        crawler.runJobs([job], config, postExecution(config, ["updateCache", "clean", "rename"], gracefulEnd), progressPrinter);

    }).on('--help', function() {
        examples([
            'download "One Piece" 42',
            'dl Naruto 690'
        ]);
    });

var updateCommand = program
    .command('update [series...]')
    .alias('up')
    .description('Update the series you subscribed to.')
    .option('-f, --force', 'When no chapters are found for a series, nothing will get downloaded unless forced.')
    .option('-c, --cache', 'Use cache to remember the progress in case some readDirectories are not available.')
    .action(function(series, options) {
        if (options.readDirectories) {
            options.readDirectories = options.readDirectories.split(';');
        }
        var config = init(program, options);

        updater.update(series, config, postExecution(config, ["updateCache", "clean", "rename"], gracefulEnd), progressPrinter);
    }).on('--help', function() {
        examples([
            'update',
            'up Bleach "One Piece" -r /look/in/this/folder;/and/in/this/one'
        ]);
    });

var cacheCommand = program
    .command('cache [series...]')
    .description('Show current cache and/or update it.')
    .option('-l, --list', 'List the cache.')
    .option('-u, --update', 'Update the cache for the subscribed series.')
    .option('-z, --zero', 'Ignore the values in the cache, even if it\'s value is higher. Only if using --update.')
    .action(function(series, options) {
        if (options.readDirectories) {
            options.readDirectories = options.readDirectories.split(';');
        }
        var config = init(program, options);

        // Listing cache values
        function listCache() {
            var keys = Object.keys(config.cacheData);
            if (series.length !== 0) {
                keys = keys.filter(function(key) {
                    return series.indexOf(key) !== -1;
                });
            }

            var cacheAsString = keys
                .sort()
                .map(function(key) {
                    return key + ": " + config.cacheData[key];
                })
                .join('\n');

            console.log(cacheAsString);
        }

        if (config.update) {
            updater.updateCache(config, series, function(error) {
                if (error) {
                    gracefulEnd(error);
                }
                saveCache(config, function(error) {
                    if (error) {
                        gracefulEnd(error);
                    }
                    if (config.list) {
                        listCache();
                    }
                });
            });
        } else if (config.list) {
            listCache();
        } else {
            gracefulEnd("Missing argument specifying the operation (--list / --update).");
        }
    }).on('--help', function() {
        examples([
            'cache -l                     # Lists content of cache',
            'cache -uz                    # Update cache by starting from scratch then list it.',
            'cache Naruto -uz             # Update cache for Naruto, erasing what\'s inside the cache.',
            'cache -ur /look/in/this/folder;/and/in/this/one # Update cache by looking at specific folders',
        ]);
    });

var cleanCommand = program
    .command('clean [folders...]')
    .alias('cl')
    .description('Clean by removing starkana and/or duplicate files in a folder (default: outputDirectory specified in the config).')
    .action(function(folders, options) {
        var config = init(program, options);
        if (folders.length === 0) {
            folders = [config.outputDirectory];
        }

        clean(folders, config, function(error) {
            folders = folders.map(function(f) {
                return {
                    outputFile: f
                };
            });
            postExecution(config, ["rename"], gracefulEnd)(error, folders);
        });
    }).on('--help', function() {
        examples([
            'clean /my/folder -sd',
            'cl /my/folder /my/second/folder -sd'
        ]);
    });

var renameCommand = program
    .command('rename [folders...]')
    .alias('rn')
    .description('Rename files in folders (default: outputDirectory specified in the config).')
    .action(function(folders, options) {
        var config = init(program, options);
        if (folders.length === 0) {
            folders = [config.outputDirectory];
        }
        rename(folders, config, gracefulEnd);
    }).on('--help', function() {
        examples([
            'rename /my/folder',
            'rn /my/folder /my/second/folder'
        ]);
    });

var subCommand = program
    .command('sub [series...]')
    .description('List subscriptions or subscribe to series.')
    .option('-d, --delete', 'Unsubscribe from series.')
    .option('-u, --url <url>', 'Specify url for the given series (can only be used for one series).')
    .action(function(series, options) {
        var config = init(program, options),
            action;

        if (options.delete && series.length === 0) {
            gracefulEnd("Missing series argument.");
        }

        if (series.length === 0) { // Listing subscriptions
            var subscriptions = config.subscriptions.map(function(s) {
                if (s.url) {
                    return s.name + " (at " + s.url + ")";
                }
                return s.name;
            });
            console.log(subscriptions.sort().join('\n'));
            return;
        }

        if (config.delete) { // Unsubscribing
            subscriber.unsubscribe(series, config);
            action = "Unsubscribed from";
        } else { // Subscribing
            subscriber.subscribe(series, config, options.url);
            config.subscriptions = config.subscriptions.sort(function(a, b) {
                if (a.name < b.name) {
                    return -1;
                }
                if (a.name > b.name) {
                    return 1;
                }
                return 0;
            });
            action = "Subscribed to";
        }
        saveConfig(config);
        console.log(action + " " + series.join(", ") + ".");
        gracefulEnd();
    }).on('--help', function() {
        examples([
            'sub                        # Lists subscriptions',
            'sub Naruto "One Piece"     # Subscribe to Naruto and One Piece',
            'sub -d Naruto              # Unsubscribe from Naruto',
            'sub Naruto -u N/Naruto     # Subscribe to Naruto, and use N/Naruto as the url'
        ]);
    });

// Adding options common to multiple commands
[downloadCommand, updateCommand, cleanCommand].forEach(function(command) {
    command
        .option('-s, --cleanStarkanaCredits', 'Remove Starkana credits')
        .option('-d, --cleanDuplicates', 'Remove duplicate files in all of the downloaded chapters (used to remove scanlation credits).')
        .option('-R, --rename', 'Rename folders after operation.');
});

[downloadCommand, updateCommand].forEach(function(command) {
    command
        .option('-O, --outputDirectory <directory>', 'Directory in which the files will be downloaded.');
});

[updateCommand, cacheCommand].forEach(function(command) {
    command
        .option('-r, --readDirectories <directories>', 'Directories in which to look into to find current progress (not including the outputDirectory). Separate by \';\'.');
});

program.parse(process.argv);

if (!process.argv.length) {
    var commands = [
        downloadCommand,
        updateCommand,
        cacheCommand,
        subCommand,
        cleanCommand,
        renameCommand
    ].map(function(c) {
        return c.name();
    });

    if (commands.indexOf(process.argv[2]) === -1 && commands.indexOf(process.argv[3]) === -1) {
        program.help();
    }
}